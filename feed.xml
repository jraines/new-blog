<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-11-16T16:57:00-05:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Getting Started with Clojure Web Development</title>
    <link rel="alternate" href="http://blog.url.com/2015/11/16/getting-started-with-clojure-web-development.html"/>
    <id>http://blog.url.com/2015/11/16/getting-started-with-clojure-web-development.html</id>
    <published>2015-11-16T16:57:00-05:00</published>
    <updated>2015-11-16T16:58:08-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Gentle Intro to Web Development in Clojure&lt;/h1&gt;

&lt;h2&gt;Coverage goals&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Develoment environment setup (lein-figwheel, a REPL, (a little) Emacs&lt;/li&gt;
&lt;li&gt;Minimal server setup&lt;/li&gt;
&lt;li&gt;Om on the client side&lt;/li&gt;
&lt;li&gt;Devcards for interactive UI development&lt;/li&gt;
&lt;li&gt;Database interaction with YeSQL&lt;/li&gt;
&lt;li&gt;Deploying to a server with Ansible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;But first,&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Assumptions, Caveats, and who this is for&lt;/h2&gt;

&lt;p&gt;I assume you know Clojure syntax, and are familiar with (but far from an expert on) the Clojure &amp;amp; ClojureScript ecosystem. Maybe you&amp;rsquo;re like me, and have been dabbling for a while &amp;ndash; doing some 4Clojure problems, reading a book or two, maybe putting together a small project, but pretty sure you were Doing It Wrong.&lt;/p&gt;

&lt;p&gt;If that sounds like you, unfortunately this guide won&amp;rsquo;t solve that, but I hope it will be a step forward towards the goal of &lt;em&gt;putting it all together&lt;/em&gt;.  I aim to cover some environment setup, basic setup of a server, and make a few pieces of the exciting potential of Om Next a bit more approachable. Finally we&amp;rsquo;ll deploy to a server.&lt;/p&gt;

&lt;h2&gt;Starting with Leiningen and Figwheel&lt;/h2&gt;

&lt;p&gt;To create a new project, run &lt;code&gt;lein new figwheel appname&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then to start the browser repl: &lt;code&gt;lein figwheel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For a nicer repl (arrow key history navigation &amp;amp; more), you&amp;rsquo;ll probably want to install &lt;code&gt;rlwrap&lt;/code&gt; (available via Homebrew on OSX), then start the repl with &lt;code&gt;rlwrap lein figwheel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;src/[appname]/core.cljs&lt;/code&gt; You can edit the &lt;code&gt;on-js-reload&lt;/code&gt; function to do something every time the code is hot reloaded.&lt;/p&gt;

&lt;h3&gt;Running the repl from Emacs with Cider&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;project.clj&lt;/code&gt; uncomment &lt;code&gt;:nrepl-port 7888&lt;/code&gt; in the &lt;code&gt;:figwheel&lt;/code&gt; section of the config.&lt;/p&gt;

&lt;p&gt;To ensure that Cider uses the correct version of nREPL tools, add this to &lt;code&gt;project.clj&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight clojure"&gt;&lt;span class="no"&gt;:profiles&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:dev&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:dependencies&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;org.clojure/tools.nrepl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"0.2.12"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
           &lt;/span&gt;&lt;span class="no"&gt;:repl-options&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:nrepl-middleware&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cemerick.piggieback/wrap-repl&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In terminal, run &lt;code&gt;lein figwheel&lt;/code&gt;. You should see the figwheel server start, awaiting a browser connection.&lt;/p&gt;

&lt;p&gt;Then, in Emacs, do &lt;code&gt;cider-connect&lt;/code&gt;, choose &lt;code&gt;localhost&lt;/code&gt; then manually enter &lt;code&gt;7888&lt;/code&gt; and press enter.&lt;/p&gt;

&lt;p&gt;You may have to then manually open the cider REPL buffer (I think this is a bug, perhaps local to my Emacs version/installation, and it&amp;rsquo;s supposed to open on connect).&lt;/p&gt;

&lt;p&gt;Once the REPL is available, enter &lt;code&gt;(use &amp;#39;figwheel-sidecar.repl-api)&lt;/code&gt; then &lt;code&gt;(cljs-repl)&lt;/code&gt;.   Now when you load your &lt;code&gt;index.html&lt;/code&gt; in the browser, you should get your &lt;code&gt;cljs.user&amp;gt;&lt;/code&gt; browser repl.  Executing &lt;code&gt;(println &amp;quot;Hi&amp;quot;)&lt;/code&gt; should make that message show up in your page&amp;rsquo;s javascript console.&lt;/p&gt;

&lt;p&gt;I skip that &lt;code&gt;(use &amp;#39;figwheel-sidecar.repl-api)&lt;/code&gt; by adding the following to a &lt;code&gt;dev/user.clj&lt;/code&gt; file and telling Leiningen to use that by adding &lt;code&gt;&amp;quot;dev&amp;quot;&lt;/code&gt; to the &lt;code&gt;:source-paths&lt;/code&gt; vector in &lt;code&gt;project.clj&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight clojure"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;figwheel-sidecar.repl-api&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:refer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cljs-repl&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can place other customizations for your dev environment REPL here.&lt;/p&gt;

&lt;h3&gt;CSS watching / reloading&lt;/h3&gt;

&lt;p&gt;CSS files inside &lt;code&gt;resources/public/css&lt;/code&gt; will automatically be reloaded.
You can customize this in the &lt;code&gt;:figwheel&lt;/code&gt; map of options in the &lt;code&gt;:cljsbuild&lt;/code&gt; options map in &lt;code&gt;project.clj&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;A server with Ring, Compojure, and httpkit&lt;/h2&gt;

&lt;p&gt;Add the following dependencies to &lt;code&gt;project.clj&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight clojure"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;compojure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"1.4.0"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="c1"&gt;;routing
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;http-kit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"2.1.19"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="c1"&gt;;server 
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;com.cognitect/transit-clj&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"0.8.285"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;transit for clj
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;com.cognitect/transit-cljs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"0.8.225"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;;transit for cljs
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ll use compojure to define the routes our application will respond to and http-kit to be our web server.&lt;/p&gt;

&lt;p&gt;Transit is a data format that plays extra nicely with clojure data structures.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jraines/gentle-om-next/commit/8e70c146ee3e543f90b7476a202f06a7fd65c354#diff-59ac2781f662f112526300f4a4719b87R1"&gt;In a new file&lt;/a&gt;, we set up our server, routes, and add a few helper functions for writing &amp;amp; reading transit data.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t be too put off by the boilerplate around reading and writing transit; I copied it from &lt;a href="https://github.com/swannodette/transit-example"&gt;here&lt;/a&gt; and there&amp;rsquo;s likely a better way (including the ring-transit middleware we&amp;rsquo;ll see shortly).&lt;/p&gt;

&lt;p&gt;Finally we use &lt;a href="https://github.com/jraines/gentle-om-next/commit/8e70c146ee3e543f90b7476a202f06a7fd65c354#diff-51041914672e7e8c6288e92ec0a1d56fR3"&gt;a library&lt;/a&gt; from Google Closure to make an ajax request to fetch some data.&lt;/p&gt;

&lt;h2&gt;Om&lt;/h2&gt;

&lt;p&gt;The next few commits follow the &lt;a href="https://github.com/omcljs/om/wiki/Quick-Start-(om.next)"&gt;Om Next quickstart guide&lt;/a&gt;, so I won&amp;rsquo;t dwell much on them. (In fact, if this is your first time checking out Om, you should definitely go there first &amp;ndash; I really only want to spend time on the piece of Om that I found confusing &amp;ndash; the &amp;ldquo;boring&amp;rdquo; mechanics of setting up client / server sync.  It&amp;rsquo;s actually quite easy, just not currently well documented, in my opinion. &lt;em&gt;Note:  as of this writing, the version of Om I&amp;rsquo;m talking about is currently called Om Next, and is in alpha status, and thus so is this part of the guide&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jraines/gentle-om-next/commit/ab0150afafdfe3b305270d6a8e8977f7fedf8985"&gt;First we&amp;rsquo;ll add Om as a dependency and make a basic component.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jraines/gentle-om-next/commit/39be499a06b89698fe2048f4f8dcfc905a0b4400"&gt;Then, let&amp;rsquo;s make it accept props as parameters.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jraines/gentle-om-next/commit/f44d51670c992fbfc909b324e5541e4b68e991da"&gt;Next, let&amp;rsquo;s set up our read function, parser, and reconciler, and grab data from the server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point you should see that your component:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Expresses its data requirements as an Om query expression&lt;/li&gt;
&lt;li&gt;Is provided that data from the app state by the reconciler, which uses the parser that you defined to process the query.&lt;/li&gt;
&lt;li&gt;Can (via the read function you give to the parser) request that all or part of its data requirements be fetch from the server if not found locally.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let&amp;rsquo;s let Om manage our state between client and server instead of handling that ourselves with explicit ajax requests and &lt;code&gt;swap!&lt;/code&gt;ing the &lt;code&gt;app-state&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll need to provide a function to the &lt;code&gt;:send&lt;/code&gt; key of the reconciler&amp;rsquo;s parameter map.  This will be a function which takes two parameters:  the EDN of the query expression fragment that will be passed to the server, and a callback to handle the response. In this case, our function closes over the single remote URL we&amp;rsquo;ll be sending to on the server.  Notice that what we &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; have to do in the callback is update our app-state:  Om handles it.&lt;/p&gt;

&lt;p&gt;On the server, we have a similar &lt;code&gt;om/parser&lt;/code&gt; function which takes the app state and a &lt;code&gt;:read&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;In the request handler, we respond with a transit-encoded result of parsing the state and the query expression fragment that was sent, which is nested in the &lt;code&gt;:remote&lt;/code&gt; key of the transit encoded params (these are decoded for us by ring-transit).  This is where using transit pays off &amp;ndash; we can pass this piece of the request directly into the parser function (note - this is the function &lt;em&gt;created&lt;/em&gt; by &lt;code&gt;om/parser&lt;/code&gt; as parameterized with your read (and mutate, which I don&amp;rsquo;t cover here) functions).&lt;/p&gt;

&lt;p&gt;In the case of &lt;code&gt;:description&lt;/code&gt;, the value is sent back to the server, but since there is no &lt;code&gt;:sender&lt;/code&gt; key in the app state on the server, we send back &lt;code&gt;:not-found&lt;/code&gt; and let the client handle that.&lt;/p&gt;

&lt;p&gt;I also added &lt;code&gt;ring-reload&lt;/code&gt; so I didn&amp;rsquo;t have to restart the server on each change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jraines/gentle-om-next/commit/9e92e22307db3e3086a7b5404b78424625ad6407"&gt;Here&amp;rsquo;s the commit for the above setup&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Devcards&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/bhauman/devcards"&gt;Devcards&lt;/a&gt; is a tool that allows for interactive development of UI components in isolations. You can view them at different states at the same time, compare different edge cases (long text, blank values, etc) without constantly having to replicate that in your main app.  It has a host of other capabilities as well.&lt;/p&gt;

&lt;p&gt;It has great documentation, so I&amp;rsquo;ll refer you there, and to &lt;a href="https://github.com/jraines/gentle-om-next/commit/77abe9a72b556b86890bd1a8160694a011625d4a"&gt;this commit&lt;/a&gt; that got me set up in the most basic way.  Note that to get real benefits, you&amp;rsquo;ll need to do some setup and/or mocking of your Om parsers, reconciler, and possibly server so you can test your components in all their states.&lt;/p&gt;

&lt;p&gt;The one thing I missed, due to a lack of understanding about Leiningen &amp;amp; cljsbuild, was that I needed to do &lt;code&gt;lein figwheel devcards&lt;/code&gt; to start it up, rather than &lt;code&gt;lein figwheel&lt;/code&gt;, which uses your &lt;code&gt;:dev&lt;/code&gt; build profile.&lt;/p&gt;

&lt;h1&gt;Working with a SQL database&lt;/h1&gt;

&lt;h2&gt;YesQL&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/krisajenkins/yesql"&gt;YesQL&lt;/a&gt; is a simple way to use SQL from Clojure, no extra DSL on top of it.  You put your queries in their own &lt;code&gt;.sql&lt;/code&gt; files, and then generate functions for run them with the &lt;code&gt;defquery&lt;/code&gt; macro.&lt;/p&gt;

&lt;p&gt;This one is pretty straigtforward, so you can go straight from the docs, with two caveats, one borne of my lack of mastery of Leiningen environments and one which I think is an omission from the docs (even if in this case, too, I may be missing some knowledge about SQL files):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you put your query files in &lt;code&gt;resources&lt;/code&gt;, you don&amp;rsquo;t include that in your reference to the SQL file in &lt;code&gt;defquery&lt;/code&gt;, because &lt;code&gt;resources&lt;/code&gt; is part of the Leiningen classpath.&lt;/li&gt;
&lt;li&gt;The SQL files must start with a blank line.  -_-&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Ragtime&lt;/h2&gt;

&lt;p&gt;Coming from Rails, I can&amp;rsquo;t live without database migrations.  &lt;a href="https://github.com/weavejester/ragtime"&gt;Ragtime&lt;/a&gt; gives us this ability. I used the suggested &lt;a href="https://github.com/weavejester/ragtime/wiki/Leiningen-Integration"&gt;Leiningen integration&lt;/a&gt;, and the trickiest thing I found about this, was if I had an error in my SQL, no error would be thrown from &lt;code&gt;lein migrate&lt;/code&gt;.  The table just wouldn&amp;rsquo;t be there. I need to look into it more and see if you just have to rescue exceptions manually and print something on migration failure.&lt;/p&gt;

&lt;p&gt;Note: the same point as the previous section about referencing paths to your migrations directory within &lt;code&gt;resources&lt;/code&gt; applies here.&lt;/p&gt;

&lt;p&gt;Also, from the docs: &amp;ldquo;Note that alphanumeric ordering is used, so if a single migration has more than 9 parts, then start off with 01, 02, etc&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I think I need more exploration in the database area.  I&amp;rsquo;m not really satisifed with this combo yet, but it&amp;rsquo;s definitely enough to write a simple app backed by a SQL database. I have a feeling I&amp;rsquo;m going to miss ActiveRecord, though, for all the shit it gets in the Ruby community.&lt;/p&gt;

&lt;h1&gt;Deploying to a VPS with Ansible&lt;/h1&gt;

&lt;p&gt;The goal is to have a one line task that will package up our app, provision a server with everything it needs, prep our database, and run our app using &lt;code&gt;java -jar /path/to/jar&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Building the uberjar&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ll want to ensure that your development dependencies don&amp;rsquo;t get shipped with your production app.  I found the &lt;a href="https://github.com/weavejester/environ"&gt;environ&lt;/a&gt; tool useful for this, and also shuffled a few dependencies from the main list in &lt;code&gt;project.clj&lt;/code&gt; to specific &lt;code&gt;:profiles&lt;/code&gt; sections.&lt;/p&gt;

&lt;p&gt;(I had to do a &lt;a href="https://github.com/jraines/gentle-om-next/commit/ea94287bb9acf6057273ae6db5c58ac6d06cb4b2#diff-59ac2781f662f112526300f4a4719b87R12"&gt;bit of hackery&lt;/a&gt; to ensure my project could be built for production without its development dependencies, despite the fact that references to development-only functions were contained in &lt;code&gt;defn&lt;/code&gt;&amp;rsquo;d fuctions that wouldn&amp;rsquo;t be called in production mode. Would love feedback on the right way to handle this.&lt;/p&gt;

&lt;p&gt;In your main class that will run your server, add &lt;code&gt;(:gen-class)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;:uberjar&lt;/code&gt; profile in &lt;code&gt;project.clj&lt;/code&gt;, this line will ensure that your production js gets included:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight clojure"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:prep-tasks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"compile"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"cljsbuild"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"once"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"min"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;a href="https://github.com/emezeske/lein-cljsbuild/issues/366#issuecomment-134230350"&gt;this discussion&lt;/a&gt; for using this method over the Leiningen hook for cljsbuild.&lt;/p&gt;

&lt;p&gt;Issue: I see multiple &amp;ldquo;Compiling [ns]&amp;hellip;&amp;rdquo; outputs for each namespace, despite no circular dependencies.  I&amp;rsquo;m not sure if this is a sign of something wrong, but everything seems to work.&lt;/p&gt;

&lt;h2&gt;Provisioning with Ansible&lt;/h2&gt;

&lt;p&gt;I did this on a DigitalOcean VPS running Ubuntu 15.10.  There will be differnces compared to older Ubuntu versions.&lt;/p&gt;

&lt;p&gt;One particular one is that Ansible expects Python 2.x, and Ubuntu 15.10 ships with Python 3 as its default.  So step 0 is to log into the server and run: 
&lt;code&gt;apt-get install python-simplejson&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you can create an Ansible playbook to provision the server.  This is beyond the scope of this README for the most part, but here&amp;rsquo;s a few notes just of what I learned. (TODO - still in progress)&lt;/p&gt;

&lt;p&gt;I also wrote about doing so &lt;a href="http://jeremyraines.com/2014/09/13/deploying-a-microservice-with-ansible.html"&gt;in this blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Need to check in on the db?
&lt;code&gt;psql myapp -U myappuser -h 127.0.0.1 --password&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Organization of ansible roles
http://docs.ansible.com/ansible/playbooks&lt;em&gt;best&lt;/em&gt;practices.html#task-and-handler-organization-for-a-role&lt;/p&gt;

&lt;p&gt;Some helpful steps for setting java &amp;amp; lein with Ansible
https://semaphoreci.com/community/tutorials/how-to-set-up-a-clojure-environment-with-ansible&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Removing lein packages from local repo</title>
    <link rel="alternate" href="http://blog.url.com/2015/10/26/removing-lein-packages-from-local-repo.html"/>
    <id>http://blog.url.com/2015/10/26/removing-lein-packages-from-local-repo.html</id>
    <published>2015-10-26T15:46:00-04:00</published>
    <updated>2015-10-26T15:47:16-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;code&gt;rm -rf /.m2/repository/packagename&lt;/code&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Perlin noise (naive &amp; slow) literate programming example</title>
    <link rel="alternate" href="http://blog.url.com/2015/10/26/perlin-noise-naive-slow-literate-programming-example.html"/>
    <id>http://blog.url.com/2015/10/26/perlin-noise-naive-slow-literate-programming-example.html</id>
    <published>2015-10-26T10:22:00-04:00</published>
    <updated>2015-10-26T14:54:34-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Perlin Noise&lt;/h1&gt;

&lt;p&gt;&lt;a href="/noise.html"&gt;View the source with documenation&lt;/a&gt;, generated by Marginalia.&lt;/p&gt;

&lt;p&gt;A Clojure implementation of Perlin noise.  Slow, naive, and possibly otherwise flawed.&lt;/p&gt;

&lt;p&gt;I tried for about 6 hours to get Marginalia to handle comments inside of forms, without success.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Connecting Figwheel to Emacs</title>
    <link rel="alternate" href="http://blog.url.com/2015/10/25/Connecting-Figwheel-to-Emacs.html"/>
    <id>http://blog.url.com/2015/10/25/Connecting-Figwheel-to-Emacs.html</id>
    <published>2015-10-25T14:18:00-04:00</published>
    <updated>2015-10-25T14:32:58-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;ul&gt;
&lt;li&gt;Make sure you have the lein-fighweel plugin&lt;/li&gt;
&lt;li&gt;Make sure you have nrepl port set (mine is 7888)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lein repl :connect 7888&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In Emacs, run &lt;code&gt;cider-connect&lt;/code&gt;, choose &lt;code&gt;localhost&lt;/code&gt;, and type the port (7888)&lt;/li&gt;
&lt;li&gt;In that repl, &lt;code&gt;(use &amp;#39;figwheel-sidecar.repl-api)&lt;/code&gt; then &lt;code&gt;(cljs-repl)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cider-jack-in&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Load page in browser&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(in-ns your-ns.core)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>The German Tank Problem For Competitive Intel</title>
    <link rel="alternate" href="http://blog.url.com/2015/09/26/german-tank-problem-for-competitive-intel.html"/>
    <id>http://blog.url.com/2015/09/26/german-tank-problem-for-competitive-intel.html</id>
    <published>2015-09-25T20:00:00-04:00</published>
    <updated>2015-10-25T14:52:16-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;The German Tank Problem&lt;/h1&gt;

&lt;h2&gt;Or Why To Obfuscate Your User IDs&lt;/h2&gt;

&lt;p&gt;(note, this is pulled largely from the Wikipedia page, where there is additional derivation
of these equations.  This post started as an exercise in understanding by explaining, and ended
as an exercise in learning LaTex and seeing how high I could raise my blood pressure)&lt;/p&gt;

&lt;p&gt;In World War II, Allied intelligence used conventional intelligence and statistical
estimation to try to guess the production of German tanks.&lt;/p&gt;

&lt;p&gt;The statistical estimates, which were based on a handful of serial numbers from
captured tanks, turned out to be much, much more accurate.&lt;/p&gt;

&lt;p&gt;From a frequentist perspective, this estimation is given by the formula:&lt;/p&gt;

&lt;p&gt;\[N = m + {m - k \over k}\]&lt;/p&gt;

&lt;p&gt;where m is the max serial number from the sample, and k is the size of the sample.
Intuitively, this is sample maximum plus the average gap between observations in the sample&lt;/p&gt;

&lt;p&gt;A Bayesian analysis yields a probability mass function.&lt;/p&gt;

&lt;p&gt;\[P(N = n) =
\begin{cases}
  0 &amp;amp; \quad \text{if } n &amp;lt; m\cr
  {k -1 \over k} {{ m - 1 \choose k - 1 } \over { n \choose k }} &amp;amp; \quad \text{otherwise}
\end{cases}\]&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A probability mass function differs from a probability density function (pdf) in that the latter is associated with continuous rather than discrete random variables; the values of the latter are not probabilities as such: a pdf must be integrated over an interval to yield a probability.  (source: Wikipedia)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From this we can get the mean and standard deviation of the distribution in order to estimate.&lt;/p&gt;

&lt;p&gt;\[N \approx \mu \pm \sigma \]&lt;/p&gt;

&lt;p&gt;The mean of a probability distribution is:&lt;/p&gt;

&lt;p&gt;\[\mu = \sum_{\substack{x}} xP(x)\]&lt;/p&gt;

&lt;p&gt;(Note: in wikipedia, this is referred to as &amp;ldquo;order of magnitude&amp;rdquo; &amp;ndash; why?)&lt;/p&gt;

&lt;p&gt;So, in this case it is:&lt;/p&gt;

&lt;p&gt;\[\mu = \sum_{\substack{n}} n \times (N = n \text{ | } M = m, K = k) \]&lt;/p&gt;

&lt;p&gt;Alright, so what&amp;rsquo;s the probability that N = n, given m and k?&lt;/p&gt;

&lt;p&gt;Conditional probability tells us that:&lt;/p&gt;

&lt;p&gt;\[(n | m,k) = (m | n,k){(n | k) \over (m | k)}\]&lt;/p&gt;

&lt;p&gt;The first term on the right-hand side is the probability that the max serial number
is equal to m, when n is known&lt;/p&gt;

&lt;p&gt;The numerator of the second term is the credibility that the total number of tanks
is equal to n when k tanks have been observed but before the serial numbers have
been observed. Assume that it has a discrete uniform distribution.&lt;/p&gt;

&lt;p&gt;The denominator is  the probability that the maximum serial number is equal to m
once k tanks have been observed but before the serial numbers have actually been observed.
\scriptstyle (m\mid k) can be re-written in terms of the other quantities by marginalizing
over all possible \scriptstyle n.&lt;/p&gt;

&lt;p&gt;For k &amp;gt;= 4, there are formulas to get the mean and standard deviation (see wikipedia for derivation)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Resume Inspired by Chris Wanstrath</title>
    <link rel="alternate" href="http://blog.url.com/2015/09/23/wanstrath-style-resume.html"/>
    <id>http://blog.url.com/2015/09/23/wanstrath-style-resume.html</id>
    <published>2015-09-22T20:00:00-04:00</published>
    <updated>2015-09-25T14:23:10-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;The resume format is so awful. Resumes should be: What I&amp;rsquo;m interested in, what I&amp;rsquo;m good at, and why I&amp;rsquo;m good at it.&lt;/p&gt;&amp;mdash; Chris Wanstrath (@defunkt) &lt;a href="https://twitter.com/defunkt/status/183409973341065216"&gt;March 24, 2012&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h1&gt;What I&amp;rsquo;m interested in&lt;/h1&gt;

&lt;p&gt;A small team with a single vision that drives them.  A team that has fun together,
because they do things that amaze each other, where every individual looks forward to getting the next
pull request.  A small team that invests time in thinking, in tools, and in experimentation by prototyping.
I believe these investments are time savers and force multipliers.&lt;/p&gt;

&lt;p&gt;Specifically (and as of September 2015), I&amp;rsquo;m interested in these technologies, which I believe are the
fruits of such teams and values, and will enable small, productive, less fragmented engineering teams in the coming years:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Functional programming in general&lt;/li&gt;
&lt;li&gt;Immutable data&lt;/li&gt;
&lt;li&gt;The confluence of the above in Clojure, Clojurescript, React.js&lt;/li&gt;
&lt;li&gt;GraphQL / Falcor style alternatives to REST&lt;/li&gt;
&lt;li&gt;Machine Learning (and digging into math and algorithms)&lt;/li&gt;
&lt;li&gt;Probablistic thinking&lt;/li&gt;
&lt;li&gt;Generative testing&lt;/li&gt;
&lt;li&gt;Disposable infrastructure&lt;/li&gt;
&lt;li&gt;Data visualization (and digging into computer graphics)&lt;/li&gt;
&lt;li&gt;Cognitive biases, especially in the realm of doing and managing software development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;m not an expert at any of these things, but I&amp;rsquo;m rapidly getting better at understanding and
applying the first three, and spending a lot of time building my fundamental base for the rest.&lt;/p&gt;

&lt;h1&gt;What I&amp;rsquo;m good at&lt;/h1&gt;

&lt;p&gt;Building and strengthening an engineering team.  Breaking down problems (or sometimes
finding better questions).  I&amp;rsquo;m good at Ruby on Rails and JavaScript. I&amp;rsquo;m a good communicator, especially in
written forms (this may not be evident from this blog, but I like to think I usually have the right touch in a lot of
startup-related contexts, like email, chat, one-on-ones, code review, etc). I&amp;rsquo;m pretty good at, and trying to
get better at, systems thinking.  I&amp;rsquo;m good at working with partial or fully remote teams.&lt;/p&gt;

&lt;h1&gt;Why I&amp;rsquo;m good at it&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve worked at big companies and small; rolling in cash, and rolling towards the end of the runway.
I&amp;rsquo;ve had the good fortune to work with some truly excellent technologists and gifted leaders, and during my
time as a systems auditor for PriceWaterhouseCoopers, get an inside look at great work environments and stifling ones.&lt;/p&gt;

&lt;p&gt;As a programmer, I&amp;rsquo;ve put in the time. Innumerable late nights down the rabbit hole because I couldn&amp;rsquo;t
stop until it worked, then back again in the morning, if necessary (as it often was), until I understood it. Biting
off more than I could chew, and making it work. Battles with Linux servers. Debugging under pressure. Hotfixes.
All of the above after a page at 11pm New Year Eve.&lt;/p&gt;

&lt;p&gt;Learning about version control, testing, and processes so I could put my cowboy hat away.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been at it long enough to understand that tech is a fashion business, and learn when to buy the latest
trend and how to avoid tomorrow&amp;rsquo;s bell-bottoms (most of the time).&lt;/p&gt;

&lt;p&gt;Recently, I taught a three month intensive class on web
development, and this made me better at tailoring my feedback to individuals, being patient, and illustrating
concepts with relevant examples.&lt;/p&gt;

&lt;p&gt;I read, all the time, as much as I can. As many books &amp;ndash; technical, historical, and sociological &amp;ndash; as I can digest.
I keep up with people on the cutting edge and try to learn about the giants on whose shoulders they stand.
I love this stuff and am plugged into this culture, but I&amp;rsquo;m not so narrow that I can&amp;rsquo;t tell which parts are childish and toxic, and I
know when to unplug, go home, and recharge.&lt;/p&gt;
</content>
  </entry>
</feed>
