<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-02-28T15:49:00-08:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>A good evaluation of the AlphaGo milestone</title>
    <link rel="alternate" href="http://blog.url.com/2016/02/28/a-good-evaluation-of-the-alphago-milestone.html"/>
    <id>http://blog.url.com/2016/02/28/a-good-evaluation-of-the-alphago-milestone.html</id>
    <published>2016-02-28T15:49:00-08:00</published>
    <updated>2016-02-28T15:55:00-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I believe the following is a reasonable take on what the AlphaGo program &amp;amp; win &amp;ldquo;means&amp;rdquo; for AI, regardless of whether it wins or loses vs. Lee Sedol:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;progress so far has largely been toward demonstrating general approaches for building narrow systems rather than general approaches for building general systems. Progress toward the former does not entail substantial progress toward the latter. The latter, which requires transfer learning among other elements, has yet to have its Atari/AlphaGo moment, but is an important area to keep an eye on going forward, and may be especially relevant for economic/safety purposes. This suggests that an important element of rigorously modeling AI progress may be formalizing the idea of different levels of generality of operating AI systems (as opposed to the generality of the methods that produce them, though that is also important).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="http://www.milesbrundage.com/blog-posts/alphago-and-ai-progress"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This opinion is based on my understanding of AlphaGo, which uses two neural networks, a value network and a policy network, trained on a corpus of Go games between experts, to narrow the search space to be explored by Monte Carlo tree search.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Lightweight Clojure/ClojureScript REPL for Atom</title>
    <link rel="alternate" href="http://blog.url.com/2016/01/17/a-lightweight-clojure-clojurescript-repl-for-atom.html"/>
    <id>http://blog.url.com/2016/01/17/a-lightweight-clojure-clojurescript-repl-for-atom.html</id>
    <published>2016-01-17T12:18:00-08:00</published>
    <updated>2016-01-17T12:23:27-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;An Atom editor plugin I made, inspired by (and key parts lifted from) &lt;a href="https://www.github.com/jasongilman/proto-repl"&gt;Proto-REPL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://atom.io/packages/repl-lite"&gt;REPL-lite&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Becoming an In-Demand Developer: The Bad Parts</title>
    <link rel="alternate" href="http://blog.url.com/2015/12/20/the-road-to-in-demand-developer-the-crappy-parts.html"/>
    <id>http://blog.url.com/2015/12/20/the-road-to-in-demand-developer-the-crappy-parts.html</id>
    <published>2015-12-20T11:53:00-08:00</published>
    <updated>2016-01-14T10:28:00-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Becoming an In-Demand Developer: The Bad Parts&lt;/h1&gt;

&lt;p&gt;I haven&amp;rsquo;t done nearly as many interviews as a lot of software developers, but I&amp;rsquo;ve done enough that my answer to the usual first question (&amp;ldquo;Tell me a little about yourself&amp;rdquo; or &amp;ldquo;How did you get started as a developer?&amp;rdquo;) rolls off my tongue pretty easily. It goes something like this:&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&amp;ldquo;I went to a summer camp as a teen and learned Turbo Pascal.  I didn&amp;rsquo;t really stick with it, but played enough with that and making basic web pages in the early days of the web that I knew I wanted to major in CS.  I did that for a few semesters at Georgia Tech, but between my workload as a swimmer, the difficulty of the math requirements, and my need to keep a certain GPA to retain my scholarship, I switched majors.&lt;/p&gt;

&lt;p&gt;Later, after college, I decided to try web development as a hobby.  Early on, while messing around with PHP and mySQL, a friend of a friend recommended I try Ruby on Rails, and that clicked for me.  Very soon after that, some friends approached me to help them automate some aspects of a workflow they were using to handicap college football games, and that turned into my first paid project.&lt;/p&gt;

&lt;p&gt;I was still doing it as a hobby when the financial crash liberated me from my job at the time, and I decided to move to Utah and snowboard, but continued to learn programming and pick up side projects along the way until I moved to California for a girl, and later got my first full-time developer job.&amp;rdquo;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;It&amp;rsquo;s a nice, neat story, don&amp;rsquo;t you think?&lt;/p&gt;

&lt;p&gt;This past summer, I taught a class on web development in New York City, and tried to reassure the students along the way that becoming a developer is a marathon, not a sprint (despite a bootcamp being a very expensive sprint at the beginning), and that it will be hard at times, hard enough that you will question yourself and your decision to start this journey, and whether you should continue.&lt;/p&gt;

&lt;p&gt;Despite that, especially for those who specifically are doing this to improve their earning prospects, it&amp;rsquo;s easy to forget those words of caution and focus onthe thought of &amp;ldquo;If I just get a couple years experience, I can make six figures.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Last night I was clearing out my starred emails in Gmail, and it took me down memory lane and reminded me of some of the parts of that story that weren&amp;rsquo;t so neat, or fun.  Here are just a few of the false starts, dead-ends, and failures along the way.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One of the reasons I was laid off from my last non-dev job because I pitched my manager on a project to do some scraping for LinkedIn.  She was excited, until I didn&amp;rsquo;t finish a hugely expanded version of it in a week. Oh, and because of this project, when they fired me, they tried to hijack my personal LinkedIn account because it was now work-related.  Also, despite the company being finance-related and laying off other staff after the crash (I was the newest hire), this side project&amp;rsquo;s &amp;ldquo;failure&amp;rdquo; was used to deny me unemployment benefits and say I was fired for cause.&lt;/li&gt;
&lt;li&gt;Despite being interested in Rails, having to learn all about Wordpress to do &amp;ldquo;quick&amp;rdquo; (read: spend 80 hours, bill for 15) projects.&lt;/li&gt;
&lt;li&gt;Repeat for Drupal, Magento, some hosting provider&amp;rsquo;s heinous custom CMS, etc.&lt;/li&gt;
&lt;li&gt;Hundreds of hours learning about how to deploy your app and configure it in production through frustrating trial and error.  Redoing large chunks of that learning for client B&amp;rsquo;s hosting provider.  Repeat again for the cloud era.  Repeat again for cloud platform B.&lt;/li&gt;
&lt;li&gt;A hundred-ish hours learning about developing for Google Wave. &lt;/li&gt;
&lt;li&gt;Countless hours &amp;ldquo;learning&amp;rdquo; Linux (re: fighting with, losing, considering throwing computer into a river.)&lt;/li&gt;
&lt;li&gt;My first &amp;ldquo;big&amp;rdquo; project as a freelancer. Almost didn&amp;rsquo;t get it because the other developer was &amp;ldquo;shocked&amp;rdquo; that I didn&amp;rsquo;t know how to cut up a Photoshop file.&lt;/li&gt;
&lt;li&gt;Having to relearn PHP to deal with the existing codebase, done by an overseas shop.&lt;/li&gt;
&lt;li&gt;Middle of the night Skype calls with said shop.  Everything must be repeated three times, once because the connection is bad, once because I can&amp;rsquo;t understand the accent well, and another time to clarify my understanding of the message.&lt;/li&gt;
&lt;li&gt;Pay being withheld because the client was not happy; being threatened with a lawsuit when I threatened to withhold in-progress work. (I wanted to go all Rocky 4 and say &amp;ldquo;Sue me for what?&amp;rdquo;, and send a picture of my bedroom at the time, which was a bed I didn&amp;rsquo;t own, a desk I built myself, and a set of Rubbermaid drawers with my clothes in them.)&lt;/li&gt;
&lt;li&gt;Being paid around $4k for that whole project.  I don&amp;rsquo;t know the number of hours, but as an indication of the scale: I have over 600 emails exchanged with the client.&lt;/li&gt;
&lt;li&gt;Having to pay that $4k, and then some, to the overseas team when I discovered my partner had diverted funds for that into a venture of his father&amp;rsquo;s, with no means to replace it.&lt;/li&gt;
&lt;li&gt;Note at this point I have been a &amp;ldquo;developer&amp;rdquo; for almost 2 years and had over $20k of car loan and credit card debt. Consider applying for public assistance.&lt;/li&gt;
&lt;li&gt;Upon moving to California, get my first interview for a full-time Ruby job.  It would&amp;rsquo;ve paid $40k and been in the basement of a porn mansion.  Get rejected because I try to describe an algorithm for reversing the letters in a string, instead of saying to use Ruby&amp;rsquo;s &lt;code&gt;String#reverse&lt;/code&gt; standard library method.&lt;/li&gt;
&lt;li&gt;Get rejected from another job. I&amp;rsquo;m not sure the reason, but the interviewer asked me straight up in the interview if I was a Mormon.&lt;/li&gt;
&lt;li&gt;Start to give up.  Apply for an IT support job at a local college.  Attend a pitch meeting for a telemarketing firm at a sketchy warehouse in the Valley.&lt;/li&gt;
&lt;li&gt;Land my first job!  Am dumped in a corner with an old CRT and given a Linux user account.  Next human contact is a couple days later, when my manager asks me how the project is coming.  Quit two days later in a panic.&lt;/li&gt;
&lt;li&gt;Here is where my luck finally turned, and through a recruiter (yes, those awful people we complain about constantly), I got a job that paid almost double the one I quit.  I almost botched this one, too, because I was 20 minutes late to the interview after being stuck in traffic. This job was a godsend, but it was a 1.5 hour commute by Amtrak.&lt;/li&gt;
&lt;li&gt;Of the first 8 months on this job, 6 were spent migrating from Rails 2 to Rails 3.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thankfully, though, this was when my learning curve took off. I had a smart, helpful CTO that valued learning and mentorship and good coworkers to learn from. This was in 2011 &amp;ndash; 10 years after starting my CS studies, 4 years after being exposed to Rails for the first time, and 2.5 years after starting to call myself a developer.&lt;/p&gt;

&lt;p&gt;Today, I think many bootcamp grads can compress this timeline quite a lot, but I sympathize with their struggles in the current market, where everyone wants a senior dev and/or wants to hire you for free or for peanuts to work on a shitty project that you aren&amp;rsquo;t confident about and doesn&amp;rsquo;t align with your interests.  Some will be fortunate and get that $70k job right off the bat, but if you&amp;rsquo;re not one of those, there is still light at the end of the tunnel if you are persistent and enjoy learning enough that you can stomach learning things that might not directly help you in the future.&lt;/p&gt;

&lt;p&gt;The struggle will harden you, and you&amp;rsquo;ll absorb more knowledge along the way than you think.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Getting Started with Clojure Web Development</title>
    <link rel="alternate" href="http://blog.url.com/2015/11/16/getting-started-with-clojure-web-development.html"/>
    <id>http://blog.url.com/2015/11/16/getting-started-with-clojure-web-development.html</id>
    <published>2015-11-16T13:57:00-08:00</published>
    <updated>2015-11-16T13:58:08-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Gentle Intro to Web Development in Clojure&lt;/h1&gt;

&lt;h2&gt;Coverage goals&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Develoment environment setup (lein-figwheel, a REPL, (a little) Emacs&lt;/li&gt;
&lt;li&gt;Minimal server setup&lt;/li&gt;
&lt;li&gt;Om on the client side&lt;/li&gt;
&lt;li&gt;Devcards for interactive UI development&lt;/li&gt;
&lt;li&gt;Database interaction with YeSQL&lt;/li&gt;
&lt;li&gt;Deploying to a server with Ansible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;But first,&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Assumptions, Caveats, and who this is for&lt;/h2&gt;

&lt;p&gt;I assume you know Clojure syntax, and are familiar with (but far from an expert on) the Clojure &amp;amp; ClojureScript ecosystem. Maybe you&amp;rsquo;re like me, and have been dabbling for a while &amp;ndash; doing some 4Clojure problems, reading a book or two, maybe putting together a small project, but pretty sure you were Doing It Wrong.&lt;/p&gt;

&lt;p&gt;If that sounds like you, unfortunately this guide won&amp;rsquo;t solve that, but I hope it will be a step forward towards the goal of &lt;em&gt;putting it all together&lt;/em&gt;.  I aim to cover some environment setup, basic setup of a server, and make a few pieces of the exciting potential of Om Next a bit more approachable. Finally we&amp;rsquo;ll deploy to a server.&lt;/p&gt;

&lt;h2&gt;Starting with Leiningen and Figwheel&lt;/h2&gt;

&lt;p&gt;To create a new project, run &lt;code&gt;lein new figwheel appname&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then to start the browser repl: &lt;code&gt;lein figwheel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For a nicer repl (arrow key history navigation &amp;amp; more), you&amp;rsquo;ll probably want to install &lt;code&gt;rlwrap&lt;/code&gt; (available via Homebrew on OSX), then start the repl with &lt;code&gt;rlwrap lein figwheel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;src/[appname]/core.cljs&lt;/code&gt; You can edit the &lt;code&gt;on-js-reload&lt;/code&gt; function to do something every time the code is hot reloaded.&lt;/p&gt;

&lt;h3&gt;Running the repl from Emacs with Cider&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;project.clj&lt;/code&gt; uncomment &lt;code&gt;:nrepl-port 7888&lt;/code&gt; in the &lt;code&gt;:figwheel&lt;/code&gt; section of the config.&lt;/p&gt;

&lt;p&gt;To ensure that Cider uses the correct version of nREPL tools, add this to &lt;code&gt;project.clj&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight clojure"&gt;&lt;span class="no"&gt;:profiles&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:dev&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:dependencies&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;org.clojure/tools.nrepl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"0.2.12"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
           &lt;/span&gt;&lt;span class="no"&gt;:repl-options&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:nrepl-middleware&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cemerick.piggieback/wrap-repl&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In terminal, run &lt;code&gt;lein figwheel&lt;/code&gt;. You should see the figwheel server start, awaiting a browser connection.&lt;/p&gt;

&lt;p&gt;Then, in Emacs, do &lt;code&gt;cider-connect&lt;/code&gt;, choose &lt;code&gt;localhost&lt;/code&gt; then manually enter &lt;code&gt;7888&lt;/code&gt; and press enter.&lt;/p&gt;

&lt;p&gt;You may have to then manually open the cider REPL buffer (I think this is a bug, perhaps local to my Emacs version/installation, and it&amp;rsquo;s supposed to open on connect).&lt;/p&gt;

&lt;p&gt;Once the REPL is available, enter &lt;code&gt;(use &amp;#39;figwheel-sidecar.repl-api)&lt;/code&gt; then &lt;code&gt;(cljs-repl)&lt;/code&gt;.   Now when you load your &lt;code&gt;index.html&lt;/code&gt; in the browser, you should get your &lt;code&gt;cljs.user&amp;gt;&lt;/code&gt; browser repl.  Executing &lt;code&gt;(println &amp;quot;Hi&amp;quot;)&lt;/code&gt; should make that message show up in your page&amp;rsquo;s javascript console.&lt;/p&gt;

&lt;p&gt;I skip that &lt;code&gt;(use &amp;#39;figwheel-sidecar.repl-api)&lt;/code&gt; by adding the following to a &lt;code&gt;dev/user.clj&lt;/code&gt; file and telling Leiningen to use that by adding &lt;code&gt;&amp;quot;dev&amp;quot;&lt;/code&gt; to the &lt;code&gt;:source-paths&lt;/code&gt; vector in &lt;code&gt;project.clj&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight clojure"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;figwheel-sidecar.repl-api&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:refer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cljs-repl&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can place other customizations for your dev environment REPL here.&lt;/p&gt;

&lt;h3&gt;CSS watching / reloading&lt;/h3&gt;

&lt;p&gt;CSS files inside &lt;code&gt;resources/public/css&lt;/code&gt; will automatically be reloaded.
You can customize this in the &lt;code&gt;:figwheel&lt;/code&gt; map of options in the &lt;code&gt;:cljsbuild&lt;/code&gt; options map in &lt;code&gt;project.clj&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;A server with Ring, Compojure, and httpkit&lt;/h2&gt;

&lt;p&gt;Add the following dependencies to &lt;code&gt;project.clj&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight clojure"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;compojure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"1.4.0"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="c1"&gt;;routing
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;http-kit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"2.1.19"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="c1"&gt;;server 
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;com.cognitect/transit-clj&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"0.8.285"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;;transit for clj
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;com.cognitect/transit-cljs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"0.8.225"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;;transit for cljs
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;ll use compojure to define the routes our application will respond to and http-kit to be our web server.&lt;/p&gt;

&lt;p&gt;Transit is a data format that plays extra nicely with clojure data structures.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jraines/gentle-om-next/commit/8e70c146ee3e543f90b7476a202f06a7fd65c354#diff-59ac2781f662f112526300f4a4719b87R1"&gt;In a new file&lt;/a&gt;, we set up our server, routes, and add a few helper functions for writing &amp;amp; reading transit data.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t be too put off by the boilerplate around reading and writing transit; I copied it from &lt;a href="https://github.com/swannodette/transit-example"&gt;here&lt;/a&gt; and there&amp;rsquo;s likely a better way (including the ring-transit middleware we&amp;rsquo;ll see shortly).&lt;/p&gt;

&lt;p&gt;Finally we use &lt;a href="https://github.com/jraines/gentle-om-next/commit/8e70c146ee3e543f90b7476a202f06a7fd65c354#diff-51041914672e7e8c6288e92ec0a1d56fR3"&gt;a library&lt;/a&gt; from Google Closure to make an ajax request to fetch some data.&lt;/p&gt;

&lt;h2&gt;Om&lt;/h2&gt;

&lt;p&gt;The next few commits follow the &lt;a href="https://github.com/omcljs/om/wiki/Quick-Start-(om.next)"&gt;Om Next quickstart guide&lt;/a&gt;, so I won&amp;rsquo;t dwell much on them. (In fact, if this is your first time checking out Om, you should definitely go there first &amp;ndash; I really only want to spend time on the piece of Om that I found confusing &amp;ndash; the &amp;ldquo;boring&amp;rdquo; mechanics of setting up client / server sync.  It&amp;rsquo;s actually quite easy, just not currently well documented, in my opinion. &lt;em&gt;Note:  as of this writing, the version of Om I&amp;rsquo;m talking about is currently called Om Next, and is in alpha status, and thus so is this part of the guide&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jraines/gentle-om-next/commit/ab0150afafdfe3b305270d6a8e8977f7fedf8985"&gt;First we&amp;rsquo;ll add Om as a dependency and make a basic component.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jraines/gentle-om-next/commit/39be499a06b89698fe2048f4f8dcfc905a0b4400"&gt;Then, let&amp;rsquo;s make it accept props as parameters.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jraines/gentle-om-next/commit/f44d51670c992fbfc909b324e5541e4b68e991da"&gt;Next, let&amp;rsquo;s set up our read function, parser, and reconciler, and grab data from the server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point you should see that your component:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Expresses its data requirements as an Om query expression&lt;/li&gt;
&lt;li&gt;Is provided that data from the app state by the reconciler, which uses the parser that you defined to process the query.&lt;/li&gt;
&lt;li&gt;Can (via the read function you give to the parser) request that all or part of its data requirements be fetch from the server if not found locally.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let&amp;rsquo;s let Om manage our state between client and server instead of handling that ourselves with explicit ajax requests and &lt;code&gt;swap!&lt;/code&gt;ing the &lt;code&gt;app-state&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll need to provide a function to the &lt;code&gt;:send&lt;/code&gt; key of the reconciler&amp;rsquo;s parameter map.  This will be a function which takes two parameters:  the EDN of the query expression fragment that will be passed to the server, and a callback to handle the response. In this case, our function closes over the single remote URL we&amp;rsquo;ll be sending to on the server.  Notice that what we &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; have to do in the callback is update our app-state:  Om handles it.&lt;/p&gt;

&lt;p&gt;On the server, we have a similar &lt;code&gt;om/parser&lt;/code&gt; function which takes the app state and a &lt;code&gt;:read&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;In the request handler, we respond with a transit-encoded result of parsing the state and the query expression fragment that was sent, which is nested in the &lt;code&gt;:remote&lt;/code&gt; key of the transit encoded params (these are decoded for us by ring-transit).  This is where using transit pays off &amp;ndash; we can pass this piece of the request directly into the parser function (note - this is the function &lt;em&gt;created&lt;/em&gt; by &lt;code&gt;om/parser&lt;/code&gt; as parameterized with your read (and mutate, which I don&amp;rsquo;t cover here) functions).&lt;/p&gt;

&lt;p&gt;In the case of &lt;code&gt;:description&lt;/code&gt;, the value is sent back to the server, but since there is no &lt;code&gt;:sender&lt;/code&gt; key in the app state on the server, we send back &lt;code&gt;:not-found&lt;/code&gt; and let the client handle that.&lt;/p&gt;

&lt;p&gt;I also added &lt;code&gt;ring-reload&lt;/code&gt; so I didn&amp;rsquo;t have to restart the server on each change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jraines/gentle-om-next/commit/9e92e22307db3e3086a7b5404b78424625ad6407"&gt;Here&amp;rsquo;s the commit for the above setup&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Devcards&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/bhauman/devcards"&gt;Devcards&lt;/a&gt; is a tool that allows for interactive development of UI components in isolations. You can view them at different states at the same time, compare different edge cases (long text, blank values, etc) without constantly having to replicate that in your main app.  It has a host of other capabilities as well.&lt;/p&gt;

&lt;p&gt;It has great documentation, so I&amp;rsquo;ll refer you there, and to &lt;a href="https://github.com/jraines/gentle-om-next/commit/77abe9a72b556b86890bd1a8160694a011625d4a"&gt;this commit&lt;/a&gt; that got me set up in the most basic way.  Note that to get real benefits, you&amp;rsquo;ll need to do some setup and/or mocking of your Om parsers, reconciler, and possibly server so you can test your components in all their states.&lt;/p&gt;

&lt;p&gt;The one thing I missed, due to a lack of understanding about Leiningen &amp;amp; cljsbuild, was that I needed to do &lt;code&gt;lein figwheel devcards&lt;/code&gt; to start it up, rather than &lt;code&gt;lein figwheel&lt;/code&gt;, which uses your &lt;code&gt;:dev&lt;/code&gt; build profile.&lt;/p&gt;

&lt;h1&gt;Working with a SQL database&lt;/h1&gt;

&lt;h2&gt;YesQL&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/krisajenkins/yesql"&gt;YesQL&lt;/a&gt; is a simple way to use SQL from Clojure, no extra DSL on top of it.  You put your queries in their own &lt;code&gt;.sql&lt;/code&gt; files, and then generate functions for run them with the &lt;code&gt;defquery&lt;/code&gt; macro.&lt;/p&gt;

&lt;p&gt;This one is pretty straigtforward, so you can go straight from the docs, with two caveats, one borne of my lack of mastery of Leiningen environments and one which I think is an omission from the docs (even if in this case, too, I may be missing some knowledge about SQL files):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you put your query files in &lt;code&gt;resources&lt;/code&gt;, you don&amp;rsquo;t include that in your reference to the SQL file in &lt;code&gt;defquery&lt;/code&gt;, because &lt;code&gt;resources&lt;/code&gt; is part of the Leiningen classpath.&lt;/li&gt;
&lt;li&gt;The SQL files must start with a blank line.  -_-&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Ragtime&lt;/h2&gt;

&lt;p&gt;Coming from Rails, I can&amp;rsquo;t live without database migrations.  &lt;a href="https://github.com/weavejester/ragtime"&gt;Ragtime&lt;/a&gt; gives us this ability. I used the suggested &lt;a href="https://github.com/weavejester/ragtime/wiki/Leiningen-Integration"&gt;Leiningen integration&lt;/a&gt;, and the trickiest thing I found about this, was if I had an error in my SQL, no error would be thrown from &lt;code&gt;lein migrate&lt;/code&gt;.  The table just wouldn&amp;rsquo;t be there. I need to look into it more and see if you just have to rescue exceptions manually and print something on migration failure.&lt;/p&gt;

&lt;p&gt;Note: the same point as the previous section about referencing paths to your migrations directory within &lt;code&gt;resources&lt;/code&gt; applies here.&lt;/p&gt;

&lt;p&gt;Also, from the docs: &amp;ldquo;Note that alphanumeric ordering is used, so if a single migration has more than 9 parts, then start off with 01, 02, etc&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I think I need more exploration in the database area.  I&amp;rsquo;m not really satisifed with this combo yet, but it&amp;rsquo;s definitely enough to write a simple app backed by a SQL database. I have a feeling I&amp;rsquo;m going to miss ActiveRecord, though, for all the shit it gets in the Ruby community.&lt;/p&gt;

&lt;h1&gt;Deploying to a VPS with Ansible&lt;/h1&gt;

&lt;p&gt;The goal is to have a one line task that will package up our app, provision a server with everything it needs, prep our database, and run our app using &lt;code&gt;java -jar /path/to/jar&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Building the uberjar&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ll want to ensure that your development dependencies don&amp;rsquo;t get shipped with your production app.  I found the &lt;a href="https://github.com/weavejester/environ"&gt;environ&lt;/a&gt; tool useful for this, and also shuffled a few dependencies from the main list in &lt;code&gt;project.clj&lt;/code&gt; to specific &lt;code&gt;:profiles&lt;/code&gt; sections.&lt;/p&gt;

&lt;p&gt;(I had to do a &lt;a href="https://github.com/jraines/gentle-om-next/commit/ea94287bb9acf6057273ae6db5c58ac6d06cb4b2#diff-59ac2781f662f112526300f4a4719b87R12"&gt;bit of hackery&lt;/a&gt; to ensure my project could be built for production without its development dependencies, despite the fact that references to development-only functions were contained in &lt;code&gt;defn&lt;/code&gt;&amp;rsquo;d fuctions that wouldn&amp;rsquo;t be called in production mode. Would love feedback on the right way to handle this.&lt;/p&gt;

&lt;p&gt;In your main class that will run your server, add &lt;code&gt;(:gen-class)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;:uberjar&lt;/code&gt; profile in &lt;code&gt;project.clj&lt;/code&gt;, this line will ensure that your production js gets included:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight clojure"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:prep-tasks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"compile"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"cljsbuild"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"once"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"min"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;a href="https://github.com/emezeske/lein-cljsbuild/issues/366#issuecomment-134230350"&gt;this discussion&lt;/a&gt; for using this method over the Leiningen hook for cljsbuild.&lt;/p&gt;

&lt;p&gt;Issue: I see multiple &amp;ldquo;Compiling [ns]&amp;hellip;&amp;rdquo; outputs for each namespace, despite no circular dependencies.  I&amp;rsquo;m not sure if this is a sign of something wrong, but everything seems to work.&lt;/p&gt;

&lt;h2&gt;Provisioning with Ansible&lt;/h2&gt;

&lt;p&gt;I did this on a DigitalOcean VPS running Ubuntu 15.10.  There will be differnces compared to older Ubuntu versions.&lt;/p&gt;

&lt;p&gt;One particular one is that Ansible expects Python 2.x, and Ubuntu 15.10 ships with Python 3 as its default.  So step 0 is to log into the server and run: 
&lt;code&gt;apt-get install python-simplejson&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you can create an Ansible playbook to provision the server.  This is beyond the scope of this README for the most part, but here&amp;rsquo;s a few notes just of what I learned. (TODO - still in progress)&lt;/p&gt;

&lt;p&gt;I also wrote about doing so &lt;a href="http://jeremyraines.com/2014/09/13/deploying-a-microservice-with-ansible.html"&gt;in this blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Need to check in on the db?
&lt;code&gt;psql myapp -U myappuser -h 127.0.0.1 --password&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Organization of ansible roles
http://docs.ansible.com/ansible/playbooks&lt;em&gt;best&lt;/em&gt;practices.html#task-and-handler-organization-for-a-role&lt;/p&gt;

&lt;p&gt;Some helpful steps for setting java &amp;amp; lein with Ansible
https://semaphoreci.com/community/tutorials/how-to-set-up-a-clojure-environment-with-ansible&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Removing lein packages from local repo</title>
    <link rel="alternate" href="http://blog.url.com/2015/10/26/removing-lein-packages-from-local-repo.html"/>
    <id>http://blog.url.com/2015/10/26/removing-lein-packages-from-local-repo.html</id>
    <published>2015-10-26T12:46:00-07:00</published>
    <updated>2015-10-26T12:47:16-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;code&gt;rm -rf /.m2/repository/packagename&lt;/code&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Perlin noise (naive &amp; slow) literate programming example</title>
    <link rel="alternate" href="http://blog.url.com/2015/10/26/perlin-noise-naive-slow-literate-programming-example.html"/>
    <id>http://blog.url.com/2015/10/26/perlin-noise-naive-slow-literate-programming-example.html</id>
    <published>2015-10-26T07:22:00-07:00</published>
    <updated>2015-10-26T11:54:34-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Perlin Noise&lt;/h1&gt;

&lt;p&gt;&lt;a href="/noise.html"&gt;View the source with documenation&lt;/a&gt;, generated by Marginalia.&lt;/p&gt;

&lt;p&gt;A Clojure implementation of Perlin noise.  Slow, naive, and possibly otherwise flawed.&lt;/p&gt;

&lt;p&gt;I tried for about 6 hours to get Marginalia to handle comments inside of forms, without success.&lt;/p&gt;
</content>
  </entry>
</feed>
