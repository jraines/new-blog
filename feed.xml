<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-06-07T11:36:00-07:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Postgres Tricks</title>
    <link rel="alternate" href="http://blog.url.com/2016/06/07/postgres-tricks.html"/>
    <id>http://blog.url.com/2016/06/07/postgres-tricks.html</id>
    <published>2016-06-07T11:36:00-07:00</published>
    <updated>2016-06-07T11:47:57-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Postgres Tricks&lt;/h1&gt;

&lt;h2&gt;Upsert&lt;/h2&gt;

&lt;p&gt;To insert or update a given record, you need a constraint that will let the query know that the record already exists:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight sql"&gt;&lt;span class="k"&gt;insert&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image_uid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;values&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;conflict&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="k"&gt;constraint&lt;/span&gt; &lt;span class="n"&gt;unique_image_uid&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="k"&gt;update&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;updated_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;returning&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also note the &lt;code&gt;returning&lt;/code&gt; part, which tells the query to return all the fields of the record whether it was created or updated.&lt;/p&gt;

&lt;h2&gt;Adding to an array without creating duplicates&lt;/h2&gt;

&lt;p&gt;First, create a function that can do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight sql"&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;REPLACE&lt;/span&gt; &lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;array_append_distinct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;anyarray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;anyarray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;RETURNS&lt;/span&gt; &lt;span class="n"&gt;anyarray&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="err"&gt;$$&lt;/span&gt;
  &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ARRAY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;unnest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;unnest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt; &lt;span class="k"&gt;LANGUAGE&lt;/span&gt; &lt;span class="k"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, you can use it like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight sql"&gt;&lt;span class="k"&gt;update&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array_append_distinct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;"cool"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;"stuff"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the item was already tagged with &amp;ldquo;cool&amp;rdquo;, it won&amp;rsquo;t now be &amp;ldquo;cool, cool, &amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;You may need to cast the second arg to the same type as whatever &lt;code&gt;tags&lt;/code&gt; is, like &lt;code&gt;text[]&lt;/code&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>core.async &amp; http.kit API call caching function</title>
    <link rel="alternate" href="http://blog.url.com/2016/06/06/core-async-http-kit-api-call-caching-function.html"/>
    <id>http://blog.url.com/2016/06/06/core-async-http-kit-api-call-caching-function.html</id>
    <published>2016-06-06T10:01:00-07:00</published>
    <updated>2016-06-06T10:19:55-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="/images/function.png" style="width:500px"&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cache-fn&lt;/code&gt; takes a function &amp;ndash; which itself must return a channel &amp;ndash; and returns a version of it that will cache results based on its arguments.&lt;/p&gt;

&lt;p&gt;It does this by returning a sort of &amp;ldquo;promise&amp;rdquo; result so that all consumers can get the value out of the result chan, not just the first one.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;promise-c&lt;/code&gt; returns a channel that always returns the result value.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>More useful shell incantations</title>
    <link rel="alternate" href="http://blog.url.com/2016/06/02/more-useful-shell-incantations.html"/>
    <id>http://blog.url.com/2016/06/02/more-useful-shell-incantations.html</id>
    <published>2016-06-01T19:48:00-07:00</published>
    <updated>2016-06-01T19:55:17-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;More useful shell incantations&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ls -ltr&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;List dir contents in descending order by date modified&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zip -Dr zipdest.zip /zipsource/stuff&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Recursively zip contents of a directory but flatten out paths so all files are at one level in the zip file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rename &amp;#39;s/.png.+/.png/&amp;#39; *&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Rename files based on regex substitution pattern. Note for this you should not use the old &lt;code&gt;rename&lt;/code&gt; binary.  The perl one is available via Homebrew: &lt;code&gt;brew install rename&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -O url&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Do not change the filename of the downloaded file. I always forget the correct option.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Getting a CSV of a query too big for Heroku Dataclips</title>
    <link rel="alternate" href="http://blog.url.com/2016/04/15/heroku-getting-a-csv-of-a-too-big-for-dataclips-query.html"/>
    <id>http://blog.url.com/2016/04/15/heroku-getting-a-csv-of-a-too-big-for-dataclips-query.html</id>
    <published>2016-04-15T13:27:00-07:00</published>
    <updated>2016-06-01T19:47:14-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;ol&gt;
&lt;li&gt;Copy the query into a .sql file locally.&lt;/li&gt;
&lt;li&gt;Remove all newlines, because psql&amp;rsquo;s &lt;code&gt;\copy&lt;/code&gt; command does not accept multiline arguments.&lt;/li&gt;
&lt;li&gt;Surround the query with parens and the &lt;code&gt;\copy&lt;/code&gt; command, like so: &lt;code&gt;\copy (select ...) TO dump.csv CSV DELIMITER &amp;#39;,&amp;#39; HEADERS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make sure to use &lt;code&gt;as&lt;/code&gt; aliases for any column names that are the same across tables, because this method will not be as smart as Dataclips about distinguishing the column headers for those.&lt;/li&gt;
&lt;li&gt;pipe it to psql: &lt;code&gt;cat jeans.sql | heroku pg:psql dbcolor -a yourapp&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>A good evaluation of the AlphaGo milestone</title>
    <link rel="alternate" href="http://blog.url.com/2016/02/28/a-good-evaluation-of-the-alphago-milestone.html"/>
    <id>http://blog.url.com/2016/02/28/a-good-evaluation-of-the-alphago-milestone.html</id>
    <published>2016-02-28T15:49:00-08:00</published>
    <updated>2016-02-28T15:55:00-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;I believe the following is a reasonable take on what the AlphaGo program &amp;amp; win &amp;ldquo;means&amp;rdquo; for AI, regardless of whether it wins or loses vs. Lee Sedol:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;progress so far has largely been toward demonstrating general approaches for building narrow systems rather than general approaches for building general systems. Progress toward the former does not entail substantial progress toward the latter. The latter, which requires transfer learning among other elements, has yet to have its Atari/AlphaGo moment, but is an important area to keep an eye on going forward, and may be especially relevant for economic/safety purposes. This suggests that an important element of rigorously modeling AI progress may be formalizing the idea of different levels of generality of operating AI systems (as opposed to the generality of the methods that produce them, though that is also important).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="http://www.milesbrundage.com/blog-posts/alphago-and-ai-progress"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This opinion is based on my understanding of AlphaGo, which uses two neural networks, a value network and a policy network, trained on a corpus of Go games between experts, to narrow the search space to be explored by Monte Carlo tree search.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Lightweight Clojure/ClojureScript REPL for Atom</title>
    <link rel="alternate" href="http://blog.url.com/2016/01/17/a-lightweight-clojure-clojurescript-repl-for-atom.html"/>
    <id>http://blog.url.com/2016/01/17/a-lightweight-clojure-clojurescript-repl-for-atom.html</id>
    <published>2016-01-17T12:18:00-08:00</published>
    <updated>2016-01-17T12:23:27-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;An Atom editor plugin I made, inspired by (and key parts lifted from) &lt;a href="https://www.github.com/jasongilman/proto-repl"&gt;Proto-REPL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://atom.io/packages/repl-lite"&gt;REPL-lite&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
