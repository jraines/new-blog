<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-06-14T21:54:00-07:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Clojure snippet for transforming a list of maps to a map keyed by the :id of each</title>
    <link rel="alternate" href="http://blog.url.com/2016/06/15/clojure-snippet-for-transforming-a-list-of-maps-to-a-map-keyed-by-the-id-of-each.html"/>
    <id>http://blog.url.com/2016/06/15/clojure-snippet-for-transforming-a-list-of-maps-to-a-map-keyed-by-the-id-of-each.html</id>
    <published>2016-06-14T21:54:00-07:00</published>
    <updated>2016-06-14T21:55:40-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;Transforming a list of maps to a map keyed by the :id of each&lt;/h2&gt;
&lt;pre&gt;&lt;code class="highlight clojure"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;juxt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;coll&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Thread-first macro for native objects -- doto</title>
    <link rel="alternate" href="http://blog.url.com/2016/06/15/thread-first-macro-for-native-objects-doto.html"/>
    <id>http://blog.url.com/2016/06/15/thread-first-macro-for-native-objects-doto.html</id>
    <published>2016-06-14T21:39:00-07:00</published>
    <updated>2016-06-14T21:58:43-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;From &lt;a href="https://clojuredocs.org/clojure.core/doto"&gt;the docs&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight plaintext"&gt;;; Note that even though println returns nil, doto still returns the HashMap object
user&amp;gt; (doto (java.util.HashMap.)
            (.put "a" 1)
            (.put "b" 2)
            (println))
#&amp;lt;HashMap {b=2, a=1}&amp;gt;
{"b" 2, "a" 1}

;; Equivalent to
user&amp;gt; (def m (java.util.HashMap.))
user&amp;gt; (.put m "a" 1)
user&amp;gt; (.put m "b" 2)
user&amp;gt; m
{"a" 1, "b" 2}
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Threading through functions with inconsistent positional args with as-&gt;</title>
    <link rel="alternate" href="http://blog.url.com/2016/06/15/threading-through-functions-with-inconsistent-positional-args-with-as.html"/>
    <id>http://blog.url.com/2016/06/15/threading-through-functions-with-inconsistent-positional-args-with-as.html</id>
    <published>2016-06-14T21:31:00-07:00</published>
    <updated>2016-06-14T21:35:41-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;as-&amp;gt;&lt;/h2&gt;

&lt;p&gt;Threading macro which gives an alias to the thing you&amp;rsquo;re passing through a series of functions.&lt;/p&gt;

&lt;p&gt;Copied straight from &lt;a href="https://clojuredocs.org/clojure.core/as-%3E"&gt;the docs&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight clojure"&gt;&lt;span class="c1"&gt;;; when you want to use arbitrary positioning of your argument in a thread macro
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;as-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;;; when you'd like an if statement in your thread
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;as-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;update-b&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Postgres Tricks</title>
    <link rel="alternate" href="http://blog.url.com/2016/06/07/postgres-tricks.html"/>
    <id>http://blog.url.com/2016/06/07/postgres-tricks.html</id>
    <published>2016-06-07T11:36:00-07:00</published>
    <updated>2016-06-07T11:47:57-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Postgres Tricks&lt;/h1&gt;

&lt;h2&gt;Upsert&lt;/h2&gt;

&lt;p&gt;To insert or update a given record, you need a constraint that will let the query know that the record already exists:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight sql"&gt;&lt;span class="k"&gt;insert&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image_uid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;values&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;conflict&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="k"&gt;constraint&lt;/span&gt; &lt;span class="n"&gt;unique_image_uid&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="k"&gt;update&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;updated_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;returning&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also note the &lt;code&gt;returning&lt;/code&gt; part, which tells the query to return all the fields of the record whether it was created or updated.&lt;/p&gt;

&lt;h2&gt;Adding to an array without creating duplicates&lt;/h2&gt;

&lt;p&gt;First, create a function that can do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight sql"&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;REPLACE&lt;/span&gt; &lt;span class="k"&gt;FUNCTION&lt;/span&gt; &lt;span class="n"&gt;array_append_distinct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;anyarray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;anyarray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;RETURNS&lt;/span&gt; &lt;span class="n"&gt;anyarray&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="err"&gt;$$&lt;/span&gt;
  &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ARRAY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;unnest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;unnest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt; &lt;span class="k"&gt;LANGUAGE&lt;/span&gt; &lt;span class="k"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, you can use it like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight sql"&gt;&lt;span class="k"&gt;update&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array_append_distinct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;"cool"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;"stuff"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the item was already tagged with &amp;ldquo;cool&amp;rdquo;, it won&amp;rsquo;t now be &amp;ldquo;cool, cool, &amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;You may need to cast the second arg to the same type as whatever &lt;code&gt;tags&lt;/code&gt; is, like &lt;code&gt;text[]&lt;/code&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>core.async &amp; http.kit API call caching function</title>
    <link rel="alternate" href="http://blog.url.com/2016/06/06/core-async-http-kit-api-call-caching-function.html"/>
    <id>http://blog.url.com/2016/06/06/core-async-http-kit-api-call-caching-function.html</id>
    <published>2016-06-06T10:01:00-07:00</published>
    <updated>2016-06-06T10:19:55-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="/images/function.png" style="width:500px"&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cache-fn&lt;/code&gt; takes a function &amp;ndash; which itself must return a channel &amp;ndash; and returns a version of it that will cache results based on its arguments.&lt;/p&gt;

&lt;p&gt;It does this by returning a sort of &amp;ldquo;promise&amp;rdquo; result so that all consumers can get the value out of the result chan, not just the first one.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;promise-c&lt;/code&gt; returns a channel that always returns the result value.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>More useful shell incantations</title>
    <link rel="alternate" href="http://blog.url.com/2016/06/02/more-useful-shell-incantations.html"/>
    <id>http://blog.url.com/2016/06/02/more-useful-shell-incantations.html</id>
    <published>2016-06-01T19:48:00-07:00</published>
    <updated>2016-06-01T19:55:17-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;More useful shell incantations&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ls -ltr&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;List dir contents in descending order by date modified&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zip -Dr zipdest.zip /zipsource/stuff&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Recursively zip contents of a directory but flatten out paths so all files are at one level in the zip file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rename &amp;#39;s/.png.+/.png/&amp;#39; *&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Rename files based on regex substitution pattern. Note for this you should not use the old &lt;code&gt;rename&lt;/code&gt; binary.  The perl one is available via Homebrew: &lt;code&gt;brew install rename&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -O url&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Do not change the filename of the downloaded file. I always forget the correct option.&lt;/p&gt;
</content>
  </entry>
</feed>
