<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-08-09T20:00:00-04:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Juxt for custom map accessors</title>
    <link rel="alternate" href="http://blog.url.com/2014/08/10/juxt-for-custom-map-accessors.html"/>
    <id>http://blog.url.com/2014/08/10/juxt-for-custom-map-accessors.html</id>
    <published>2014-08-09T20:00:00-04:00</published>
    <updated>2014-08-10T22:50:05-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Juxt for custom map accessors&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s say we have a map like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight clojure"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="no"&gt;:name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Jeremy"&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="no"&gt;:age&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:job&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"programmer"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Grace"&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="no"&gt;:age&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:job&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"designer"&lt;/span&gt;&lt;span class="p"&gt;}])&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I wanted to grab just the name and age from it, I could write:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight clojure"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;vector&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:age&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But with &lt;code&gt;juxt&lt;/code&gt; I can do:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight clojure"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;juxt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ppl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hat tip to &lt;a href="https://tbaldridge.pivotshare.com/media/function-of-the-day-juxt/11920"&gt;Tim Baldridge for this example&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Useful Bash Lines</title>
    <link rel="alternate" href="http://blog.url.com/2014/08/05/useful-bash-lines.html"/>
    <id>http://blog.url.com/2014/08/05/useful-bash-lines.html</id>
    <published>2014-08-04T20:00:00-04:00</published>
    <updated>2014-08-11T22:44:52-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Useful Bash One Liners&lt;/h1&gt;

&lt;p&gt;Delete files older than 7 days&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight shell"&gt;find /your_directory -mtime +7 -exec rm -f &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find largest 10 files in directory. &lt;a href="http://explainshell.com/explain?cmd=du+-hsx+*+%7C+sort+-rh+%7C+head+-10"&gt;Explanation&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight shell"&gt;du -hsx &lt;span class="k"&gt;*&lt;/span&gt; | sort -rh | head -10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get specific columns from a csv and display in columns.  Here, the first column and sixth through tenth:&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight shell"&gt;cut -d &lt;span class="s2"&gt;","&lt;/span&gt; -f 1,6-10 example.csv | column -t -s&lt;span class="s1"&gt;','&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sort a csv by a number in the fifth field&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight shell"&gt;sort -n -k5 items.csv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Average the 5th column of a file, but only consider rows where that column is greater than 150&lt;/p&gt;
&lt;pre&gt;&lt;code class="highlight shell"&gt;awk -F, &lt;span class="s1"&gt;' $5 &amp;gt; 150 {n++; sum+=$5} END{ print sum/n}'&lt;/span&gt; items.csv
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Heroku Cost Optimization for Rails Apps</title>
    <link rel="alternate" href="http://blog.url.com/2014/05/10/heroku-tips.html"/>
    <id>http://blog.url.com/2014/05/10/heroku-tips.html</id>
    <published>2014-05-09T20:00:00-04:00</published>
    <updated>2014-08-03T15:30:35-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Heroku Cost Optimization for Rails Apps&lt;/h1&gt;

&lt;p&gt;If you&amp;rsquo;re thinking about choosing (or have already chosen) Heroku for your Rails
application, you probably already know that their well-designed platform,
developer tools, documentation, and rich add-on ecosystem will save you lots of
money in devops time.  The tradeoff, of course, is more of your money going to
Heroku as you add more dynos as your app grows, and pay for more third-pary
addons.  This article will offer a few tips for keeping those costs down while
maintaining app performance and agility.&lt;/p&gt;

&lt;h2&gt;Use a web server that can process requests concurrently&lt;/h2&gt;

&lt;p&gt;An out-of-the-box Rails app on Heroku will process one request at a time.
Because Heroku uses &lt;a href="https://devcenter.heroku.com/articles/http-routing#request-distribution"&gt;random request
routing&lt;/a&gt;,
if a request goes to a dyno which is busy, it will be queued, and the user will
experience decreased responsiveness from your app.&lt;/p&gt;

&lt;p&gt;With a concurrent web server like Unicorn, your dynos can process multiple
requests simultaneously. With a little experimentation (perhaps with load
testing from &lt;a href="https://www.blitz.io"&gt;blitz.io&lt;/a&gt; and monitoring via &lt;a href="http:/www.newrelic.com"&gt;New
Relic&lt;/a&gt; &amp;ndash; both available as Heroku add-ons), you&amp;rsquo;ll
determine the right number of unicorn processes to run per dyno for your app&amp;rsquo;s
needs.&lt;/p&gt;

&lt;p&gt;An increasingly popular server choice is
&lt;a href="https://devcenter.heroku.com/articles/deploying-rails-applications-with-the-puma-web-server"&gt;Puma&lt;/a&gt;,
which also allows concurrent requests, but can also scale out via threads in
addition to worker process. Your app must be thread-safe to take advantage of
that capability.&lt;/p&gt;

&lt;h2&gt;Experiment with different dyno size options&lt;/h2&gt;

&lt;p&gt;A standard Heroku dyno comes with 512mb of RAM. When using a multi-process or
multi-threaded server solution, you&amp;rsquo;ll be loading multiple copies of your Rails
environment into memory.  However, there&amp;rsquo;s a baseline footprint and some
possible optimzations (which we&amp;rsquo;ll get to), which means that you may get more
value by running more worker processes on a smaller number of higher-memory
dynos, versus a smaller number of workers spread across many standard dynos.&lt;/p&gt;

&lt;p&gt;A new option from Heroku is their &lt;a href="https://blog.heroku.com/archives/2014/2/3/heroku-xl"&gt;XL
dyno&lt;/a&gt;, which is equivalent
to 12x a standard dyno. The potential &amp;ldquo;faster and more consistent response
times&amp;rdquo; is tempting if you&amp;rsquo;re in this usage range, but offers less elasticity in
your scaling (and, therefore, your montly bill).&lt;/p&gt;

&lt;h2&gt;Use a dyno manager to scale down in off-peak times&lt;/h2&gt;

&lt;p&gt;With New Relic and other performance monitoring tools, it&amp;rsquo;s not particularly
hard to write a script that will monitor your app&amp;rsquo;s usage and scale your dyno
numbers up or down accordingly. However, because of its low price and
configuration options, we use &lt;a href="http://www.hirefire.io"&gt;hirefire.io&lt;/a&gt; for
this, and it has saved us a considerable amount of money.  We set more aggresive
downscaling thresholds for our non-production environments for additional
savings. Update: I recommend using a fairly tolerant threshold for scaling up if
you connect this to New Relic and base it on Apdex score.&lt;/p&gt;

&lt;h2&gt;Reduce number of background workers with Sidekiq or Queue Classic&lt;/h2&gt;

&lt;p&gt;As most apps grow, they build up quite a large repertoire of tasks that need to
be performed outside of the web request/response cycle.  Many Rails apps use
Resque for this, and eventually need to run multiple worker processes to consume
their background job queues.  It&amp;rsquo;s easy to forget about these workers chugging
away in the background, pumping up your monthly bill.&lt;/p&gt;

&lt;p&gt;There are a few options to save money here.  With Ryan Smith&amp;rsquo;s
&lt;a href="https://github.com/ryandotsmith/queue_classic"&gt;queue_classic&lt;/a&gt;, a fast
database-backed queue and worker system, you could eliminate the potentially
expensive Redis dependency altogether.&lt;/p&gt;

&lt;p&gt;For an easy transition and greater throughput, try Mike Pernham&amp;rsquo;s
&lt;a href="http://sidekiq.org"&gt;Sidekiq&lt;/a&gt;, which takes advantage of a multithreaded,
actor-based architecture for increased performance.  According to Mike, he &amp;ldquo;took
one large Resque farm from 68GB of RAM to 1GB of RAM by using threads instead of
processes.&amp;rdquo;&lt;/p&gt;

&lt;h2&gt;Reduce number of expensive add-ons&lt;/h2&gt;

&lt;p&gt;This point will likely change due to competition within the Heroku add-on
ecosystem, but we&amp;rsquo;ve gotten a few wins by leveraging our existing, required
Heroku infrastructure to fill certain needs in lieu of a dedicated add-on.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Generally prefer memcached to Redis&lt;/li&gt;
&lt;li&gt;Prefer the database to Redis for anything that isn&amp;rsquo;t essentially caching&lt;/li&gt;
&lt;li&gt;If search is a feature of your app, but not central to it, leverage Postgres
or Mongo&amp;rsquo;s native full-text search capabilities instead of a hosted search
service&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Reduce the number of requests to your app for static assets&lt;/h2&gt;

&lt;p&gt;At minimum, you should be &lt;a href="https://devcenter.heroku.com/articles/rack-cache-memcached-rails31"&gt;using Rack::Cache and
memcached&lt;/a&gt;
to cache requests for static assets such as files, images, and scripts.&lt;/p&gt;

&lt;p&gt;The next step is to not serve your assets from your app servers at all, but via
Amazon S3.  We use the &lt;a href="https://github.com/rumblelabs/asset_sync"&gt;asset_sync
gem&lt;/a&gt; for this, which has been
excellent except for the increased time taken by each deploy (about 5 minutes,
for us).&lt;/p&gt;

&lt;p&gt;The final step is to also place a CDN, such as Cloudfront, in front of those S3
assets.  Heroku has &lt;a href="https://devcenter.heroku.com/articles/using-amazon-cloudfront-cdn"&gt;a guide for
this&lt;/a&gt;, but I
would add a bit of warning:&lt;/p&gt;

&lt;p&gt;If want to use SSL and have the assets served from domain (for example,
assets.smashingmagazine.com), the cost of setting that up with Cloudfront is
$600 per month.  And if you don&amp;rsquo;t do it, be prepared to hack around things like
strict browser rules for cross-origin policy on webfonts, or putting CORS rules
in place for certain assets and making sure that those CORS headers are cached
with the Cloudfront response.&lt;/p&gt;

&lt;h2&gt;Avoid tying up dynos with file uploads&lt;/h2&gt;

&lt;p&gt;Even if you&amp;rsquo;re using a concurrent web server, your users&amp;#39; requests can still get
stuck behind others if some of your requests take a lot longer than others.  The
most common case for this is file uploads. Ideally, you can use a solution like
&lt;a href="https://github.com/dwilkie/carrierwave_direct"&gt;CarrierWave Direct&lt;/a&gt; or
&lt;a href="https://www.transloadit.com"&gt;Transloadit&lt;/a&gt; to route these around your Heroku
dynos and perform any post-processing outside of the request as well.&lt;/p&gt;

&lt;p&gt;Because we need to accept uploads from mobile users, we built a separate node.js
server for handling uploads, which talks directly to S3 and then notifies our
Heroku app when it&amp;rsquo;s time to process the upload, in the background.&lt;/p&gt;

&lt;p&gt;Hopefully, these tips will save you some time, money, and headaches as your grow
your app on the Heroku platform.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Retrospective on Two Years as a Remote Startup Developer</title>
    <link rel="alternate" href="http://blog.url.com/2014/01/18/remote-retrospective.html"/>
    <id>http://blog.url.com/2014/01/18/remote-retrospective.html</id>
    <published>2014-01-17T19:00:00-05:00</published>
    <updated>2014-08-03T15:30:16-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;A Retrospective on Two Years in a Startup as a Remote Developer&lt;/h1&gt;

&lt;p&gt;Tomorrow morning, I’ll board a flight from LAX to JFK with a wardrobe woefully ill-equipped, in both style and thermal insulation, for New York City, and this will mark the end of 2 years working with, and later leading, a startup engineering team from the comfort of my home.&lt;/p&gt;

&lt;p&gt;I want to share my thoughts on this experience. As always, your mileage may vary.&lt;/p&gt;

&lt;h2&gt;Onboarding&lt;/h2&gt;

&lt;p&gt;The beginning may be the hardest phase for a remote employee. A theme of remote work is that communication is hard and needs special attention, because context clues are lacking or present in forms we’re not naturally accustomed to picking up on. It can be intimidating and difficult to learn how the company works, what the culture is like, what is expected of you, and in what timeframe.&lt;/p&gt;

&lt;p&gt;I was hired along with a CTO, who was also CTO at my previous company, so I was counting on him to help me ramp up: I could get face time since he was in my local area, and ask any question without worrying about undermining my credibility with the current team. Less than a month in, he left the company. I panicked, and tried to resign, but in a show of confidence my CEO convinced me to stay.&lt;/p&gt;

&lt;p&gt;Over the next two months I would get to know my new team: three consultant developers (in Philadelphia, India, and Iraq), a product manager, the CEO acting as product owner (both in New York), and myself (in California).&lt;/p&gt;

&lt;p&gt;At this time we took most of our technical direction and process structure from the most senior of our consultants, who in turn had cribbed some of the good ideas from the Thoughtbot Playbook, and he helped me step up my git practices and TDD skill, which are both extra important in a distributed team (the full argument for that is probably a separate essay, and one that’s already been written by someone else). We had one week product iterations with a retrospective call &amp;amp; planning call (9:30 AM Eastern on Mondays &amp;amp; Wednesdays).&lt;/p&gt;

&lt;p&gt;I suspect that some aspects of culture — some strong and some weak points— will emerge on any remote team based solely on the timezone distribution of the team members. I suffered a bit from the 6:30 AM calls (which would later be mercifully moved back a bit), not just because I’m a night owl, but because starting the day with a long conference call made it hard for me to get into a coding flow for some time after the call. I’d usually go eat breakfast, then come back to the computer in prime “chat room time” — everyone on, following up on issues raised in the call or in pull requests from the night before. So on two out of five weekdays, it would be after lunch before I got into much coding of my own. On the other hand, having some overlap with two team members near the end of their day was helpful, because their work for the day was done and in pull requests, and the U.S. team could give feedback at the start of our day and issues could usually be addressed, and the pull requests merged, before they logged off.&lt;/p&gt;

&lt;p&gt;Three months in, we hired a senior front-end developer/designer and embarked on a major new feature. From my point of view, and to the best of my recollection, this went well — better than some later large features. However, the developer decided to leave the company afterwards, and this was a setback for the company.&lt;/p&gt;

&lt;p&gt;Often when you read about distributed teams, one of the major advantages espoused is that it’s easier to hire. This is undoubtedly true: you have a larger pool of talent to draw from, and remote positions are attractive. I wonder if it’s slightly harder to retain, though — I am curious about other teams’ experiences in the first few months after hiring, because I think with remote jobs it’s easy for the candidate to have one foot out the door for a bit longer, and also for the company to consider them in a “trial phase” for longer. It’s easier to quit, or to let someone go, if a couple months have passed and the candidate doesn’t feel fully integrated, or the company is still unsure about the fit, and you don’t see each other face to face every day.&lt;/p&gt;

&lt;p&gt;Onboarding, while always key, should be even more of a strategic priority for distributed teams.&lt;/p&gt;

&lt;h2&gt;Getting Things Done&lt;/h2&gt;

&lt;p&gt;The next few months were spent revamping some existing web app functionality and adding some new features to support some marketing promotions. I don’t have much to say specifically about this time period, so I want to list some general obvservations which were becoming clear.&lt;/p&gt;

&lt;h3&gt;Automate important notifications&lt;/h3&gt;

&lt;p&gt;This is part of taking care of the boring things first. To minimize the number of messages you must manually send, set automated notifications. Be judicious. Here are some good candidates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploys&lt;/li&gt;
&lt;li&gt;Completed work is ready for testing&lt;/li&gt;
&lt;li&gt;A build passed (or failed)&lt;/li&gt;
&lt;li&gt;A commit has gone into master&lt;/li&gt;
&lt;li&gt;The site is down&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Send to email and/or group chat to taste. Don’t put too much noise into the chat room(s) where non-technical team members hang out. For email, Gmail filters can go along way towards efficiently monitoring these.&lt;/p&gt;

&lt;h3&gt;Good Writing is Everything&lt;/h3&gt;

&lt;p&gt;Once you’ve automated some of your important communication channels, nearly everything written is an outgoing signal. Not just emails, but commit messages, comments on pull requests, comments on bug tickets, etc.&lt;/p&gt;

&lt;p&gt;Economy and specificity are key. The more you write, the more opportunity for misunderstanding there is. If you find yourself writing more than a paragraph, pick up the phone.&lt;/p&gt;

&lt;p&gt;Your next actions and requests for other people to take action should be specific. If you want someone to take an action based on what you are communicating, ask for it specifically.&lt;/p&gt;

&lt;h3&gt;Push Development/Feature Branches&lt;/h3&gt;

&lt;p&gt;Often This is the best status update (among the engineering team at least — don’t overestimate how closely management is monitoring chat, even if they’re in the room).&lt;/p&gt;

&lt;p&gt;Your commit messages should be well written, and you should think about keywords when writing them, because you will want to have a searchable, informative commit log.&lt;/p&gt;

&lt;p&gt;My former colleague Len Smith has a &lt;a href="http://www.barrison.com/manipulate-history-for-meanginful-commits-with-git/"&gt;great blog post&lt;/a&gt; about when to commit while doing TDD in your feature branches to allow yourself flexibility to experiment &amp;amp; revert, and then using an interactive rebase to create an informative final commit message.&lt;/p&gt;

&lt;h3&gt;Roger Wilco&lt;/h3&gt;

&lt;p&gt;If you are told something, acknowledge it, even with an “OK” or “Hmm”. If you are asked something, give a clear answer. If you don’t understand, say so.&lt;/p&gt;

&lt;p&gt;Nothing is quite so frustrating as being in the middle of the conversation with someone and they just suddenly become unresponsive. It takes less than a second to type “brb phone” or similar, so don’t leave people hanging.&lt;/p&gt;

&lt;p&gt;Set up alerts on your name in group chat (or encourage use of the public direct message feature) so that you can be responsive without constant active monitoring of the chat.&lt;/p&gt;

&lt;h3&gt;Findability&lt;/h3&gt;

&lt;p&gt;Many discussions and decisions will be generated about any given piece of work. There should be one place where that can be referred to (either directly or via links).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Work should have a URL” &amp;ndash;Ryan Tomayko, CTO, GitHub&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I believe this is one of those areas where a policy should be in place, and someone should be responsible for enforcing this property of the system.&lt;/p&gt;

&lt;h3&gt;Flow&lt;/h3&gt;

&lt;p&gt;Engineers need to get in the zone, and email and instant messages are the enemy of the zone. People must be able to set their availability level, and it must be respected. Hours of heads down work should be OK (days heads down, not so much).&lt;/p&gt;

&lt;p&gt;If you’re a tech lead or engineering manager, you have to allow yourself the opportunity to get into flow, too. Don’t shy away from setting boundaries, having office hours, or turning down/rescheduling meetings. And checking email first thing in the morning is still a productivity destroyer even if you are starting your day three hours behind the rest of the team. Some of my most badly derailed days were a result of checking email before I even got out of bed.&lt;/p&gt;

&lt;h3&gt;Boundaries &amp;amp; Burnout&lt;/h3&gt;

&lt;p&gt;The ease of online asynchronous communications makes it tempting to be available all the time. This is how work creeps into your personal life and blurs the boundaries between working/not-working. I suffered badly from this and it was partially related to the timezone split and my own daily schedule.&lt;/p&gt;

&lt;p&gt;When the East Coast people would start rolling off for dinner around 4pm my time, I’d go for a walk on the beach (chalk one in the “pro” column of the remote work scorecard) to get some fresh air and watch the sunset.&lt;/p&gt;

&lt;p&gt;This helped me de-stress and let new ideas form unbidden, by taking my mind off the things I’d been consciously focusing on all day.&lt;/p&gt;

&lt;p&gt;But once I got back, I’d often get right back to work, because this was now my precious “alone time” for development work that required uninterrupted focus and/or unbounded exploration. Then my girlfriend would come home and be ready to unwind from her day, and sometimes I’d resent the “intrusion” — especially if I was working on something that had to be done, which, in a startup, was quite often. Even if I didn’t think I showed it, or even if I didn’t actually resent it at all, it was a burden on her to feel like she had to tiptoe around me or be sure that I was really done (since sometimes my transition for work to not-work was just closing a few windows &amp;amp; tabs).&lt;/p&gt;

&lt;p&gt;I’ve gotten better about this and usually unapologetically say to coworkers that I have to take a break, or be done for the evening, or just log off. I wish I’d adopted that mentality &amp;amp; practice sooner.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Burnout is about resentment. It’s about knowing what matters to you so much that if you don’t get it that you’re resentful. —Marissa Mayer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A lot of good counterpoints have been made to that quote—burnout is certainly about more than resentment—but I believe there’s some truth in it. It’s easy to have a bit of “remote guilt” that will cause you to be extra available, or work extra hard, sacrificing small but important moments, in the name of demonstrating—whether to yourself or to others—that you deserve the privilege of working from home (not to mention that next raise). Even if that sense of obligation comes primarily from your own head, you can get resentful, and begin to feel burnt out.&lt;/p&gt;

&lt;h3&gt;The Chat Room&lt;/h3&gt;

&lt;p&gt;Don’t develop a culture of saying “goodnight” in chat. If normal working hours are past, and you’re ready to be done for the day, just log off. If someone does mention that they’re logging off, that’s probably an invitation to hold them up if there’s something immediate that needs attention before they go, not an invitation to chit chat for another 10 or 15 minutes while they anxiously look for a polite way to say, “OK, logging off for real now”.&lt;/p&gt;

&lt;p&gt;Encourage people to be as public as possible. One on one chats almost always contain information that would be valuable in the public chat. If people are engaging in a lot of back channel chats, there’s probably a culture problem. These can be stealthy and insidious on a distributed team, and I encourage you to read Shanley’s (EDIT: she removed it and I&amp;rsquo;m not sure if it&amp;rsquo;s been reposted elsewhere) essay on the subject, from which these two excerpts are taken:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Create opportunities for team members to bond in places besides group chat — regional meetups, video chats, etc. can humanize and evolve the culture. Insist on maintaining professional rapport even in online communications — it’s a job, not a frat house. Avoid a workaholic culture where teammates rely on work for social connections they should be getting outside of work
…we form connections, even relationships using what comes down to a nub of humanity and the narrowest of windows into the soul: a screen name and a few lines of text. To make it work, we create elaborate webs of inside jokes, shared speech norms, memes, emoticons, image macros. Mythology of the company and mythology of each other. In order to function as tools of connection and belonging, these “in-group” mechanisms must lose granularity, variety and evolution in their need to mediate wide, loosely connected groups&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Don’t fight in the chat room.&lt;/h3&gt;

&lt;p&gt;It’s fine to disagree &amp;amp; argue, but the moment an argument seems intractable, personal, or emotional, you should immediately suggest a call to discuss it by voice or video. When things get emotional, you need the context clues that are absent from text alone.&lt;/p&gt;

&lt;h3&gt;Outsourcing and “Trial Projects”&lt;/h3&gt;

&lt;p&gt;We’ve had a lot of success with consultants, with one glaring failure that is akin to the failure of effective onboarding. Consultants should be treated &amp;amp; managed as part of the team. In my limited experience, siloing them/putting them on a “parallel track” simply doesn’t work. In our case, the failed case was one where we engaged a team to build a very important feature for us, but none of our own team members were fully on the project. We managed it solely by reviewing pull requests, and this led to a “frog in the frying pan” situation. Each individual PR was good enough, but after a couple months we had to admit that we were screwed — any changes to the code would be expensive and difficult. A month or two later we did an intense, high-stakes rewrite that thankfully turned out well, but could’ve been avoided.&lt;/p&gt;

&lt;p&gt;On a couple occasions when we made a new full-time hire (2 of 3 remote, the other partially remote), we made basically the same mistake. With good intentions, we wanted to give them a greenfield project so they could move quickly and display their skill and feel comfortable. What we should’ve done was have them pair program extensively on the new project and on legacy code. This would’ve reduced the risk of project failure and helped integrate them into the team (or at the worst, make a confident decision that they weren’t a fit).&lt;/p&gt;

&lt;h2&gt;In Summary&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Pay special attention to how you onboard new remote hires, extra contact and attention is needed for at least a month.&lt;/li&gt;
&lt;li&gt;Do the boring things first: automated notifications, set up CI, establish clear spaces where decisions and discussion are visible &amp;amp; linkable. Keep your feedback loops tight.&lt;/li&gt;
&lt;li&gt;For that same reason: Encourage, and enforce if needed, certain standards of responsiveness and etiquette in chat. If you’re available, you should be responsive. If someone’s not available, respect that (barring emergencies, as always).&lt;/li&gt;
&lt;li&gt;Encourage people to feel free to disconnect when they need a break or reach a logical stopping point in their day. No one should feel obligated to stay around just because someone else is still in the room (especially given timezone differences).&lt;/li&gt;
&lt;li&gt;Don’t let chat be the only source of interaction, camaraderie, and company culture.&lt;/li&gt;
&lt;li&gt;Don’t wait until everyone is offline to do work that requires uninterrupted focus (but be professional enough to not have the Do Not Disturb sign up all day)&lt;/li&gt;
&lt;li&gt;Encourage good writing everywhere: branch names, commit messages, bug reports, feature requests, release notes, etc.&lt;/li&gt;
&lt;li&gt;When things get emotional, pick up the phone — don’t fight in the chat room or over email.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
</content>
  </entry>
</feed>
